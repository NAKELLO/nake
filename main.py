import logging
import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.utils.markdown import hbold

API_TOKEN = "7748542247:AAGVgKPaOvHH7iDL4Uei2hM_zsI_6gCowkM"
ADMIN_ID = 7702280273
CHANNELS = ["@oqigalaruyatsiz", "@Qazhuboyndar"]

bot = Bot(API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# --- Database ---
conn = sqlite3.connect("database.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    bonus INTEGER DEFAULT 2,
    invited_by INTEGER
)
""")
conn.commit()


# --- Keyboards ---
def main_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.button(text="‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å")
    kb.button(text="üíé –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å")
    kb.button(text="üå∏ PREMIUM")
    kb.button(text="üõç –ú–∞–≥–∞–∑–∏–Ω")
    kb.button(text="üî• –ñ–∞–Ω—Ä")
    kb.button(text="üíé –ë–∞–ª–∞–Ω—Å")
    return kb.as_markup(resize_keyboard=True)


# --- Handlers ---
@dp.message(F.text == "/start")
async def start_handler(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    first_name = message.from_user.first_name or ""

    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()

    if not user:
        # –†–µ—Ñ–µ—Ä–∞–ª –∫–æ–¥—ã
        referrer = message.text.split()[1] if len(message.text.split()) > 1 else None
        invited_by = int(referrer) if referrer and referrer.isdigit() else None

        cursor.execute(
            "INSERT INTO users (user_id, username, first_name, bonus, invited_by) VALUES (?, ?, ?, ?, ?)",
            (user_id, username, first_name, 2, invited_by)
        )
        conn.commit()

        if invited_by:
            cursor.execute("UPDATE users SET bonus = bonus + 2 WHERE user_id = ?", (invited_by,))
            conn.commit()
            await bot.send_message(invited_by, f"üéâ –ñ–∞“£–∞ “õ–æ–ª–¥–∞–Ω—É—à—ã —Ç—ñ—Ä–∫–µ–ª–¥—ñ! –°—ñ–∑–≥–µ 2 –±–æ–Ω—É—Å –±–µ—Ä—ñ–ª–¥—ñ!")

    await message.answer("“ö–æ—à –∫–µ–ª–¥—ñ“£! –ú”ô–∑—ñ—Ä–¥–µ–Ω —Ç–∞“£–¥–∞“£—ã–∑:", reply_markup=main_keyboard())


@dp.message(F.text == "üíé –ë–∞–ª–∞–Ω—Å")
async def balance_handler(message: Message):
    cursor.execute("SELECT bonus FROM users WHERE user_id = ?", (message.from_user.id,))
    bonus = cursor.fetchone()[0]
    await message.answer(f"üí∞ –°—ñ–∑–¥—ñ“£ –±–æ–Ω—É—Å—ã“£—ã–∑: <b>{bonus}</b>")


@dp.message(F.text == "üå∏ PREMIUM")
async def premium_handler(message: Message):
    await message.answer("üëë VIP –ë–æ–Ω—É—Å—Ç–∞—Ä:\n\n50 –±–æ–Ω—É—Å = 2000—Ç–≥\n100 –±–æ–Ω—É—Å = 4000—Ç–≥\n\n–°–∞—Ç—ã–ø –∞–ª—É “Ø—à—ñ–Ω: @KazHubALU")


@dp.message(F.text == "üíé –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å")
async def earn_handler(message: Message):
    cursor.execute("UPDATE users SET bonus = bonus + 2 WHERE user_id = ?", (message.from_user.id,))
    conn.commit()
    await message.answer("‚úÖ 2 –±–æ–Ω—É—Å –±–µ—Ä—ñ–ª–¥—ñ! –¢–∞“ì—ã –¥–æ—Å —à–∞“õ—ã—Ä—ã“£—ã–∑: \n–°—ñ–∑–¥—ñ“£ —Å—ñ–ª—Ç–µ–º–µ“£—ñ–∑:\n"
                         f"https://t.me/Darvinuyatszdaribot?start={message.from_user.id}")


@dp.message(F.text == "‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å")
async def watch_handler(message: Message):
    cursor.execute("SELECT bonus FROM users WHERE user_id = ?", (message.from_user.id,))
    bonus = cursor.fetchone()[0]
    if bonus < 3:
        await message.answer("‚ùå –ö”©—Ä—É “Ø—à—ñ–Ω –±–æ–Ω—É—Å –∂–µ—Ç–ø–µ–π–¥—ñ. 'üíé –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å' –∞—Ä“õ—ã–ª—ã –∞–ª—ã“£—ã–∑.")
        return

    cursor.execute("UPDATE users SET bonus = bonus - 3 WHERE user_id = ?", (message.from_user.id,))
    conn.commit()
    await message.answer("üé¨ –ú—ñ–Ω–µ –≤–∏–¥–µ–æ:\nhttps://t.me/your_channel/video_link")


@dp.message(F.text == "üõç –ú–∞–≥–∞–∑–∏–Ω")
async def shop_handler(message: Message):
    await message.answer("üõí –ñ–∞“õ—ã–Ω–¥–∞ “õ–æ—Å—ã–ª–∞–¥—ã...")


@dp.message(F.text == "üî• –ñ–∞–Ω—Ä")
async def genre_handler(message: Message):
    await message.answer("üé≠ –ñ–∞–Ω—Ä —Ç–∞“£–¥–∞—É—ã –∂–∞“õ—ã–Ω–¥–∞ –±–æ–ª–∞–¥—ã.")


# --- Admin handlers ---
@dp.message(F.text == "“ö–æ–ª–¥–∞–Ω—É—à—ã —Å–∞–Ω—ã", F.from_user.id == ADMIN_ID)
async def count_users(message: Message):
    cursor.execute("SELECT COUNT(*) FROM users")
    count = cursor.fetchone()[0]
    await message.answer(f"üë• –ñ–∞–ª–ø—ã “õ–æ–ª–¥–∞–Ω—É—à—ã —Å–∞–Ω—ã: <b>{count}</b>")


@dp.message(F.text == "–†–∞—Å—Å—ã–ª–∫–∞", F.from_user.id == ADMIN_ID)
async def ask_broadcast(message: Message):
    await message.answer("‚úçÔ∏è –•–∞–±–∞—Ä–ª–∞–º–∞ –º”ô—Ç—ñ–Ω—ñ–Ω –∂–∞–∑—ã“£—ã–∑:")


@dp.message(F.from_user.id == ADMIN_ID)
async def do_broadcast(message: Message):
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    for user in users:
        try:
            await bot.send_message(user[0], message.text)
        except:
            pass
    await message.answer("‚úÖ –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ.")


# --- Run bot ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
