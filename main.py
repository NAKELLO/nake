import json
import os
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

API_TOKEN = '7748542247:AAEPCvB-3EFngPPv45SvBG_Nizh0qQmpwB4'
ADMIN_IDS = [7047272652, 6927494520]
CHANNELS = ['@Qazhuboyndar', '@oqigalaruyatsiz']
BLOCKED_CHAT_IDS = [-1002129935121]

USERS_FILE = 'users.json'
BONUS_FILE = 'bonus.json'
KIDS_VIDEOS_FILE = 'kids_videos.json'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

admin_waiting_broadcast = {}

# JSON –∂“Ø–∫—Ç–µ—É / —Å–∞“õ—Ç–∞—É
def load_json(file):
    if not os.path.exists(file):
        return {"all": []} if 'videos' in file else {}
    with open(file, 'r') as f:
        return json.load(f)

def save_json(file, data):
    with open(file, 'w') as f:
        json.dump(data, f, indent=2)

# –ê—Ä–Ω–∞“ì–∞ –∂–∞–∑—ã–ª“ì–∞–Ω—ã–Ω —Ç–µ–∫—Å–µ—Ä—É
async def check_subscription(user_id):
    for channel in CHANNELS:
        try:
            member = await bot.get_chat_member(channel, user_id)
            if member.status not in ["member", "administrator", "creator"]:
                return False
        except:
            return False
    return True

# –ë–∞—Ç—ã—Ä–º–∞–ª–∞—Ä
def get_main_keyboard(user_id):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üë∂ –î–µ—Ç—Å–∫–∏–π"), KeyboardButton("üéÅ –ë–æ–Ω—É—Å"))
    kb.add(KeyboardButton("üíé VIP “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫"))
    if user_id in ADMIN_IDS:
        kb.row(KeyboardButton("üì¢ –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É"), KeyboardButton("üë• “ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã"))
    return kb

# VIP info
@dp.message_handler(lambda m: m.text == "üíé VIP “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫")
async def vip_handler(message: types.Message):
    text = (
        "üíé *VIP “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫ –±–∞“ì–∞—Å—ã:*\n\n"
        "üì¶ 100 –±–æ–Ω—É—Å ‚Äì 1500 ‚Ç∏\n"
        "üì¶ 200 –±–æ–Ω—É—Å ‚Äì 2000 ‚Ç∏\n"
        "‚è≥ 1 –∞–π —à–µ–∫—Ç–µ—É—Å—ñ–∑ –∫”©—Ä—É ‚Äì 4000 ‚Ç∏\n\n"
        "üí≥ –¢”©–ª–µ—É “Ø—à—ñ–Ω –∞–¥–º–∏–Ω–≥–µ –∂–∞–∑—ã“£—ã–∑: @KazHubALU"
    )
    await message.answer(text, reply_markup=get_main_keyboard(message.from_user.id), parse_mode="Markdown")

# /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if message.chat.type != 'private':
        return

    user_id = str(message.from_user.id)
    users = load_json(USERS_FILE)
    bonus = load_json(BONUS_FILE)

    if user_id not in users:
        if not await check_subscription(message.from_user.id):
            links = "\n".join([f"üëâ {c}" for c in CHANNELS])
            await message.answer(f"üìõ –ë–æ—Ç—Ç—ã “õ–æ–ª–¥–∞–Ω—É “Ø—à—ñ–Ω –∫–µ–ª–µ—Å—ñ –∞—Ä–Ω–∞–ª–∞—Ä“ì–∞ —Ç—ñ—Ä–∫–µ–ª—ñ“£—ñ–∑:\n\n{links}\n\n‚úÖ –¢—ñ—Ä–∫–µ–ª–≥–µ–Ω —Å–æ“£ /start –¥–µ–ø “õ–∞–π—Ç–∞ –∂–∞–∑—ã“£—ã–∑.")
            return

        users[user_id] = {"kids": 0, "invited": []}
        if message.from_user.id not in ADMIN_IDS:
            bonus[user_id] = 2

        if message.get_args():
            ref_id = message.get_args()
            if ref_id != user_id and ref_id in users and user_id not in users[ref_id]['invited']:
                users[ref_id]['invited'].append(user_id)
                if ref_id not in [str(aid) for aid in ADMIN_IDS]:
                    bonus[ref_id] = bonus.get(ref_id, 0) + 2
                    try:
                        await bot.send_message(int(ref_id), "üéâ –°—ñ–∑–≥–µ 2 –±–æ–Ω—É—Å “õ–æ—Å—ã–ª–¥—ã!")
                    except:
                        pass

        save_json(USERS_FILE, users)
        save_json(BONUS_FILE, bonus)

    await message.answer("“ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑!", reply_markup=get_main_keyboard(message.from_user.id))

# üéÅ –ë–æ–Ω—É—Å
@dp.message_handler(lambda m: m.text == "üéÅ –ë–æ–Ω—É—Å")
async def bonus_handler(message: types.Message):
    bonus = load_json(BONUS_FILE)
    user_id = str(message.from_user.id)
    count = bonus.get(user_id, 0)
    await message.answer(f"üéÅ –°—ñ–∑–¥—ñ“£ –±–æ–Ω—É—Å—ã“£—ã–∑: {count}")

# üë∂ –î–µ—Ç—Å–∫–∏–π
@dp.message_handler(lambda m: m.text == "üë∂ –î–µ—Ç—Å–∫–∏–π")
async def send_kids_videos(message: types.Message):
    kids_data = load_json(KIDS_VIDEOS_FILE)
    videos = kids_data.get("all", [])
    if not videos:
        await message.answer("üë∂ –ë“±–ª –±”©–ª—ñ–º–¥–µ –≤–∏–¥–µ–æ–ª–∞—Ä –∂–æ“õ.")
        return
    for video_id in videos:
        try:
            await bot.send_video(message.chat.id, video_id)
        except:
            await message.answer("‚ö†Ô∏è –í–∏–¥–µ–æ –∂“Ø–∫—Ç–µ—É “õ–∞—Ç–µ—Å—ñ –æ—Ä—ã–Ω –∞–ª–¥—ã.")

# –ê–¥–º–∏–Ω –≤–∏–¥–µ–æ –∂“Ø–∫—Ç–µ—É
@dp.message_handler(content_types=types.ContentType.VIDEO)
async def handle_video(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    file_id = message.video.file_id
    kids_data = load_json(KIDS_VIDEOS_FILE)
    if 'all' not in kids_data:
        kids_data['all'] = []
    kids_data['all'].append(file_id)
    save_json(KIDS_VIDEOS_FILE, kids_data)
    await message.answer("‚úÖ –í–∏–¥–µ–æ —Å–∞“õ—Ç–∞–ª–¥—ã (–î–µ—Ç—Å–∫–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Å—ã–Ω–∞)")

# üë• “ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã
@dp.message_handler(lambda m: m.text == "üë• “ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã" and m.from_user.id in ADMIN_IDS)
async def user_count_handler(message: types.Message):
    users = load_json(USERS_FILE)
    await message.answer(f"üìä –ñ–∞–ª–ø—ã “õ–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã: {len(users)}")

# üì¢ –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É
@dp.message_handler(lambda m: m.text == "üì¢ –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É" and m.from_user.id in ADMIN_IDS)
async def broadcast_start(message: types.Message):
    admin_waiting_broadcast[message.from_user.id] = True
    await message.answer("‚úâÔ∏è –•–∞–±–∞—Ä–ª–∞–º–∞“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑, –±–∞—Ä–ª—ã“õ “õ–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä“ì–∞ –∂—ñ–±–µ—Ä—ñ–ª–µ–¥—ñ.")

@dp.message_handler(lambda m: m.from_user.id in ADMIN_IDS)
async def handle_admin_broadcast(message: types.Message):
    if admin_waiting_broadcast.get(message.from_user.id):
        users = load_json(USERS_FILE)
        sent = 0
        for user_id in users:
            try:
                await bot.send_message(int(user_id), message.text)
                sent += 1
            except:
                pass
        admin_waiting_broadcast[message.from_user.id] = False
        await message.answer(f"‚úÖ –•–∞–±–∞—Ä–ª–∞–º–∞ {sent} –∞–¥–∞–º“ì–∞ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ.")

# –ë–∞—Å—Ç–∞—É
if name == 'main':
    print("ü§ñ –ë–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã!")
    logging.info("‚úÖ Polling –±–∞—Å—Ç–∞–ª–¥—ã...")
    executor.start_polling(dp, skip_updates=True)
