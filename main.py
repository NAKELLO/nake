from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import logging
import json
import os

# üîê –°–ï–ù–Ü“¢ –î–ï–†–ï–ö–¢–ï–†–Ü“¢
API_TOKEN = '7748542247:AAFvfLMx25tohG6eOjnyEYXueC0FDFUJXxE'  # –ë–æ—Ç —Ç–æ–∫–µ–Ω
ADMIN_ID = 6927494520  # –°–µ–Ω—ñ“£ Telegram ID
CHANNELS = ['@darvinteioria', '@Qazhuboyndar']

PHOTO_FILE_ID = 'PHOTO_FILE_ID'  # –§–æ—Ç–æ–Ω—ã“£ file_id-—Å—ñ
VIDEO_FILE_ID = 'VIDEO_FILE_ID'  # –í–∏–¥–µ–æ–Ω—ã“£ file_id-—Å—ñ

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

DATA_FILE = "users.json"

# üìÇ –ë–∞–∑–∞ –∂“Ø–∫—Ç–µ—É
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r") as f:
        users = json.load(f)
else:
    users = {}

def save_data():
    with open(DATA_FILE, "w") as f:
        json.dump(users, f)

async def is_subscribed(user_id):
    for channel in CHANNELS:
        try:
            member = await bot.get_chat_member(channel, user_id)
            if member.status not in ["member", "administrator", "creator"]:
                return False
        except:
            return False
    return True

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_id = str(message.from_user.id)
    args = message.get_args()

    if user_id not in users:
        users[user_id] = {
            "bonus": 2,
            "invited_by": None,
            "invited": [],
            "viewed": []
        }

        if args and args != user_id:
            inviter_id = args
            if inviter_id in users:
                users[user_id]["invited_by"] = inviter_id
                users[inviter_id]["bonus"] += 2
                users[inviter_id]["invited"].append(user_id)
                await bot.send_message(inviter_id, "üéâ –°—ñ–∑ —à–∞“õ—ã—Ä“ì–∞–Ω –∞–¥–∞–º —Ç—ñ—Ä–∫–µ–ª–¥—ñ! +2 –±–æ–Ω—É—Å “õ–æ—Å—ã–ª–¥—ã ‚ú®")

        save_data()

    if not await is_subscribed(message.from_user.id):
        channels_list = '\n'.join([f'üëâ {c}' for c in CHANNELS])
        return await message.answer(f"üì¢ –ñ–∞–ª“ì–∞—Å—Ç—ã—Ä—É “Ø—à—ñ–Ω –º—ã–Ω–∞ –∞—Ä–Ω–∞–ª–∞—Ä“ì–∞ —Ç—ñ—Ä–∫–µ–ª—ñ“£—ñ–∑:\n{channels_list}")

    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üì∑ –§–æ—Ç–æ –∫”©—Ä—É", callback_data="view_photo"),
        InlineKeyboardButton("üé• –í–∏–¥–µ–æ –∫”©—Ä—É", callback_data="view_video"),
        InlineKeyboardButton("üéÅ –ë–æ–Ω—É—Å –∂–∏–Ω–∞—É", callback_data="get_bonus")
    )

    await message.answer(
        f"–°”ô–ª–µ–º, {message.from_user.first_name}!\n\n"
        f"‚≠êÔ∏è –°—ñ–∑–¥—ñ“£ –±–æ–Ω—É—Å—ã“£—ã–∑: {users[user_id]['bonus']}",
        reply_markup=kb
    )

@dp.callback_query_handler(lambda c: c.data in ["view_photo", "view_video"])
async def handle_view(call: types.CallbackQuery):
    user_id = str(call.from_user.id)
    action = call.data

    if not await is_subscribed(call.from_user.id):
        channels_list = '\n'.join([f'üëâ {c}' for c in CHANNELS])
        return await call.message.answer(f"üì¢ –ñ–∞–ª“ì–∞—Å—Ç—ã—Ä—É “Ø—à—ñ–Ω –º—ã–Ω–∞ –∞—Ä–Ω–∞–ª–∞—Ä“ì–∞ —Ç—ñ—Ä–∫–µ–ª—ñ“£—ñ–∑:\n{channels_list}")

    photo_cost = 4
    video_cost = 3

    if action == "view_photo":
        if users[user_id]['bonus'] >= photo_cost:
            users[user_id]['bonus'] -= photo_cost
            await bot.send_photo(call.from_user.id, PHOTO_FILE_ID, caption="üì∏ –§–æ—Ç–æ“£—ã–∑ –¥–∞–π—ã–Ω!")
        else:
            await call.message.answer("‚ùóÔ∏è –§–æ—Ç–æ –∫”©—Ä—É “Ø—à—ñ–Ω 4 –±–æ–Ω—É—Å “õ–∞–∂–µ—Ç.\nüéÅ –†–µ—Ñ–µ—Ä–∞–ª –∞—Ä“õ—ã–ª—ã –±–æ–Ω—É—Å –∂–∏–Ω–∞“£—ã–∑.")
    elif action == "view_video":
        if users[user_id]['bonus'] >= video_cost:
            users[user_id]['bonus'] -= video_cost
            await bot.send_video(call.from_user.id, VIDEO_FILE_ID, caption="üé¨ –í–∏–¥–µ–æ –¥–∞–π—ã–Ω!")
        else:
            await call.message.answer("‚ùóÔ∏è –í–∏–¥–µ–æ –∫”©—Ä—É “Ø—à—ñ–Ω 3 –±–æ–Ω—É—Å “õ–∞–∂–µ—Ç.\nüéÅ –†–µ—Ñ–µ—Ä–∞–ª –∞—Ä“õ—ã–ª—ã –±–æ–Ω—É—Å –∂–∏–Ω–∞“£—ã–∑.")

    save_data()

@dp.callback_query_handler(lambda c: c.data == "get_bonus")
async def get_bonus(call: types.CallbackQuery):
    user_id = str(call.from_user.id)
    bot_info = await bot.get_me()
    referral_link = f"https://t.me/{bot_info.username}?start={user_id}"

    await call.message.answer(
        f"üîó –†–µ—Ñ–µ—Ä–∞–ª —Å—ñ–ª—Ç–µ–º–µ“£—ñ–∑:\n{referral_link}\n\n"
        f"”ò—Ä —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω –∞–¥–∞–º “Ø—à—ñ–Ω +2 –±–æ–Ω—É—Å –∞–ª–∞—Å—ã–∑!"
    )

@dp.message_handler(commands=['stat'])
async def stats(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        total = len(users)
        await message.answer(f"üìä –ñ–∞–ª–ø—ã —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω “õ–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã: {total}")

# ‚≠êÔ∏è –î“±—Ä—ã—Å –±–∞—Å—Ç–∞–ª—É –±–ª–æ–≥—ã
if name == 'main':
    executor.start_polling(dp, skip_updates=True)
