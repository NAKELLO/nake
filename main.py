import os
import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram import F
from aiogram.types import Message
from aiogram.utils import executor

API_TOKEN = os.getenv("API_TOKEN")  # Railway-–¥–µ ENV –∞—Ä“õ—ã–ª—ã
ADMIN_ID = 7702280273  # –°—ñ–∑–¥—ñ“£ Telegram ID (—Ç–µ–∫—Å–µ—Ä—É “Ø—à—ñ–Ω)

# –õ–æ–≥ –∂“Ø—Ä–≥—ñ–∑—É
logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –î–µ—Ä–µ–∫“õ–æ—Ä
conn = sqlite3.connect('database.db')
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    last_name TEXT
)
''')
conn.commit()

# –ö–æ–º–∞–Ω–¥–∞–ª–∞—Ä
@dp.message_handler(commands=['start'])
async def start(message: Message):
    user = message.from_user
    cursor.execute('INSERT OR IGNORE INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)', (
        user.id, user.username, user.first_name, user.last_name
    ))
    conn.commit()
    await message.answer("–°”ô–ª–µ–º! –ë“±–ª –±–æ—Ç Railway-–¥–µ –∂“±–º—ã—Å —ñ—Å—Ç–µ–ø —Ç“±—Ä.")

@dp.message_handler(F.text == "VIP")
async def vip(message: Message):
    await message.answer("üëë VIP –ë–æ–Ω—É—Å—Ç–∞—Ä —Å–∞—Ç—ã–ø –∞–ª—É:\n\n50 –±–æ–Ω—É—Å = 2000—Ç–≥\n100 –±–æ–Ω—É—Å = 4000—Ç–≥\n\n–°–∞—Ç—ã–ø –∞–ª—É “Ø—à—ñ–Ω: @KazHubALU")

@dp.message_handler(F.text == "“ö–æ–ª–¥–∞–Ω—É—à—ã —Å–∞–Ω—ã", F.from_user.id == ADMIN_ID)
async def count_users(message: Message):
    cursor.execute("SELECT COUNT(*) FROM users")
    count = cursor.fetchone()[0]
    await message.answer(f"üë• “ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã: {count}")

@dp.message_handler(F.text == "–†–∞—Å—Å—ã–ª–∫–∞", F.from_user.id == ADMIN_ID)
async def start_broadcast(message: Message):
    await message.answer("‚úâÔ∏è –•–∞–±–∞—Ä–ª–∞–º–∞“£—ã–∑–¥—ã –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ (–±–∞—Ä–ª—ã“õ “õ–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä“ì–∞ —Ç–∞—Ä–∞—Ç—ã–ª–∞–¥—ã).")

@dp.message_handler(F.from_user.id == ADMIN_ID, content_types=types.ContentType.TEXT)
async def broadcast_text(message: Message):
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    for user in users:
        try:
            await bot.send_message(user[0], message.text)
        except Exception as e:
            logging.error(f"“ö–∞—Ç–µ: {e}")
    await message.answer("‚úÖ –ë–∞—Ä–ª—ã“ì—ã–Ω–∞ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
