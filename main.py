import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ContentType
from aiogram.utils.deep_linking import get_start_link
from database import *

API_TOKEN = '7748542247:AAEPCvB-3EFngPPv45SvBG_Nizh0qQmpwB4'
ADMIN_IDS = [7047272652, 6927494520]
CHANNELS = ['@Qazhuboyndar', '@oqigalaruyatsiz']

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

admin_waiting_action = {}
media_groups = {}

def get_main_keyboard(user_id):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(
        KeyboardButton("üõç –ú–∞–≥–∞–∑–∏–Ω"), KeyboardButton("‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å"), KeyboardButton("üî• –ñ–∞–Ω—Ä")
    )
    kb.row(
        KeyboardButton("üíé –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å"), KeyboardButton("üå∏ PREMIUM"), KeyboardButton("üíé –ë–∞–ª–∞–Ω—Å")
    )
    if user_id in ADMIN_IDS:
        kb.add(KeyboardButton("üì• –í–∏–¥–µ–æ “õ–æ—Å—É"))
    return kb

async def check_subscription(user_id):
    for channel in CHANNELS:
        try:
            member = await bot.get_chat_member(channel, user_id)
            if member.status not in ["member", "administrator", "creator"]:
                return False
        except:
            return False
    return True

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    user_id = str(message.from_user.id)
    payload = message.get_args()

    add_user(user_id, payload if payload else None)

    if payload and payload != user_id:
        add_bonus(payload, 2)

    if not await check_subscription(message.from_user.id):
        channels_list = "\n".join(CHANNELS)
        return await message.answer(f"–ë–æ—Ç—Ç—ã –ø–∞–π–¥–∞–ª–∞–Ω—É “Ø—à—ñ–Ω –∫–µ–ª–µ—Å—ñ –∫–∞–Ω–∞–ª–¥–∞—Ä“ì–∞ –∂–∞–∑—ã–ª—ã“£—ã–∑:\n{channels_list}")

    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. üëã\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –Ω–∞—à—ë–ª —á—Ç–æ –∏—Å–∫–∞–ª —Ç–∞–∫ –¥–æ–ª–≥–æ, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –°–º–æ—Ç—Ä–µ—Ç—å\n\n–ö–Ω–æ–ø–∫—É –ñ–∞–Ω—Ä üî• —ç—Ç–æ –≤–∞–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞, –Ω–µ –∑–∞–±—ã–≤–∞–π –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å!",
        reply_markup=get_main_keyboard(message.from_user.id)
    )

@dp.message_handler(lambda m: m.text == "‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å")
async def watch_handler(message: types.Message):
    user_id = str(message.from_user.id)
    video = get_random_video()

    if not video:
        return await message.answer("üì≠ ”ò–∑—ñ—Ä–≥–µ –≤–∏–¥–µ–æ –∂–æ“õ. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞ –∫”©—Ä—ñ“£—ñ–∑.")

    if message.from_user.id not in ADMIN_IDS:
        if get_bonus(user_id) < 3:
            return await message.answer("‚ùó 3 –±–æ–Ω—É—Å “õ–∞–∂–µ—Ç. –î–æ—Å—Ç–∞—Ä—ã“£—ã–∑–¥—ã —à–∞“õ—ã—Ä—ã“£—ã–∑.")
        decrease_bonus(user_id, 3)

    await message.answer_video(video)

@dp.message_handler(lambda m: m.text == "üíé –ë–∞–ª–∞–Ω—Å")
async def balance_handler(message: types.Message):
    user_id = str(message.from_user.id)
    bonus = get_bonus(user_id)
    ref_link = await get_start_link(str(user_id), encode=True)
    await message.answer(f"üíé –°—ñ–∑–¥–µ {bonus} –±–æ–Ω—É—Å –±–∞—Ä.\n–î–æ—Å—Ç–∞—Ä—ã“£—ã–∑–¥—ã —à–∞“õ—ã—Ä—ã–ø –±–æ–Ω—É—Å –∞–ª—ã“£—ã–∑:\n{ref_link}")

@dp.message_handler(lambda m: m.text == "üíé –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å")
async def earn_handler(message: types.Message):
    await balance_handler(message)

@dp.message_handler(lambda m: m.text == "üå∏ PREMIUM")
async def premium_handler(message: types.Message):
    text = (
        "üå∏ *PREMIUM “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫:*\n\n"
        "üìÜ 100 –±–æ–Ω—É—Å ‚Äì 1500 ‚Ç∏\n"
        "üìÜ 200 –±–æ–Ω—É—Å ‚Äì 2000 ‚Ç∏\n"
        "‚è≥ 1 –∞–π —à–µ–∫—Ç–µ—É—Å—ñ–∑ –∫”©—Ä—É ‚Äì 4000 ‚Ç∏\n\n"
        "üí≥ –¢”©–ª–µ—É “Ø—à—ñ–Ω –∞–¥–º–∏–Ω–≥–µ –∂–∞–∑—ã“£—ã–∑: @KazHubALU"
    )
    await message.answer(text, parse_mode="Markdown")

@dp.message_handler(lambda m: m.text == "üî• –ñ–∞–Ω—Ä")
async def genre_handler(message: types.Message):
    await message.answer("üîñ –ë“±–ª –±”©–ª—ñ–º ”ô–∑—ñ—Ä–≥–µ –¥–∞–π—ã–Ω –µ–º–µ—Å. –ö–µ—à—ñ—Ä—ñ“£—ñ–∑.")

@dp.message_handler(lambda m: m.text == "üõç –ú–∞–≥–∞–∑–∏–Ω")
async def shop_handler(message: types.Message):
    await premium_handler(message)

@dp.message_handler(lambda m: m.text == "üì• –í–∏–¥–µ–æ “õ–æ—Å—É")
async def start_video_upload(message: types.Message):
    if message.from_user.id in ADMIN_IDS:
        admin_waiting_action[message.from_user.id] = "video_upload"
        await message.answer("üé¨ –í–∏–¥–µ–æ–ª–∞—Ä–¥—ã –∂—ñ–±–µ—Ä—ñ“£—ñ–∑. –ë—ñ—Ä–Ω–µ—à–µ—É—ñ–Ω “õ–∞—Ç–∞—Ä—ã–º–µ–Ω –¥–µ –∂—ñ–±–µ—Ä—É–≥–µ –±–æ–ª–∞–¥—ã.")

@dp.message_handler(content_types=ContentType.VIDEO)
async def handle_videos(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    if admin_waiting_action.get(message.from_user.id) != "video_upload":
        return

    if message.media_group_id:
        media_id = message.media_group_id
        if media_id not in media_groups:
            media_groups[media_id] = []
        media_groups[media_id].append(message)
        await asyncio.sleep(1.5)
        if media_id in media_groups:
            for msg in media_groups[media_id]:
                add_video(msg.video.file_id)
            count = len(media_groups[media_id])
            del media_groups[media_id]
            await message.answer(f"‚úÖ {count} –≤–∏–¥–µ–æ —Å–∞“õ—Ç–∞–ª–¥—ã.")
    else:
        add_video(message.video.file_id)
        await message.answer("‚úÖ –í–∏–¥–µ–æ —Å–∞“õ—Ç–∞–ª–¥—ã.")

if __name__ == '__main__':
    from aiogram import executor
    init_db()
    executor.start_polling(dp, skip_updates=True)
