from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import json, os, logging

API_TOKEN = '7748542247:AAFvfLMx25tohG6eOjnyEYXueC0FDFUJXxE'
ADMIN_ID = 6927494520
CHANNELS = ['@Gey_Angime', '@Qazhuboyndar']

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

USERS_FILE = 'users.json'
BONUS_FILE = 'bonus.json'
PHOTOS_FILE = 'photos.json'
VIDEOS_FILE = 'videos.json'

# ---------------------- JSON Functions ----------------------
def load_json(file):
    if not os.path.exists(file):
        return {}
    with open(file, 'r') as f:
        try:
            return json.load(f)
        except:
            return {}

def save_json(file, data):
    with open(file, 'w') as f:
        json.dump(data, f, indent=2)

# ---------------------- Start Command ----------------------
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = str(message.from_user.id)
    users = load_json(USERS_FILE)
    bonus = load_json(BONUS_FILE)

    if user_id not in users:
        users[user_id] = {"videos": 0, "photos": 0, "invited": []}
        bonus[user_id] = 2

        if message.get_args():
            ref_id = message.get_args()
            if ref_id != user_id and ref_id in users and user_id not in users[ref_id]['invited']:
                users[ref_id]['invited'].append(user_id)
                bonus[ref_id] += 2
                try:
                    await bot.send_message(ref_id, "üéâ –°—ñ–∑–≥–µ 2 –±–æ–Ω—É—Å “õ–æ—Å—ã–ª–¥—ã!")
                except:
                    pass

        save_json(USERS_FILE, users)
        save_json(BONUS_FILE, bonus)

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üé• –í–∏–¥–µ–æ"), KeyboardButton("üñº –§–æ—Ç–æ"))
    kb.add(KeyboardButton("üéÅ –ë–æ–Ω—É—Å"))
    if message.from_user.id == ADMIN_ID:
        kb.add(KeyboardButton("üì¢ –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É"), KeyboardButton("üë• “ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã"))

    await message.answer("“ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑!", reply_markup=kb)

# ---------------------- Handlers ----------------------
@dp.message_handler(lambda m: m.text == "üé• –í–∏–¥–µ–æ")
async def video_handler(message: types.Message):
    user_id = str(message.from_user.id)
    bonus = load_json(BONUS_FILE)
    users = load_json(USERS_FILE)
    videos = load_json(VIDEOS_FILE).get("all", [])

    if bonus.get(user_id, 0) >= 3 and videos:
        index = users[user_id]["videos"] % len(videos)
        await message.answer_video(videos[index])
        users[user_id]["videos"] += 1
        bonus[user_id] -= 3
    elif not videos:
        await message.answer("üìõ –í–∏–¥–µ–æ –∂–æ“õ.")
    else:
        await message.answer("‚ùå 3 –±–æ–Ω—É—Å “õ–∞–∂–µ—Ç. –†–µ—Ñ–µ—Ä–∞–ª –∞—Ä“õ—ã–ª—ã –∂–∏–Ω–∞“£—ã–∑.")

    save_json(BONUS_FILE, bonus)
    save_json(USERS_FILE, users)

@dp.message_handler(lambda m: m.text == "üñº –§–æ—Ç–æ")
async def photo_handler(message: types.Message):
    user_id = str(message.from_user.id)
    bonus = load_json(BONUS_FILE)
    users = load_json(USERS_FILE)
    photos = load_json(PHOTOS_FILE).get("all", [])

    if bonus.get(user_id, 0) >= 4 and photos:
        index = users[user_id]["photos"] % len(photos)
        await message.answer_photo(photos[index])
        users[user_id]["photos"] += 1
        bonus[user_id] -= 4
    elif not photos:
        await message.answer("üìõ –§–æ—Ç–æ –∂–æ“õ.")
    else:
        await message.answer("‚ùå 4 –±–æ–Ω—É—Å “õ–∞–∂–µ—Ç. –†–µ—Ñ–µ—Ä–∞–ª –∞—Ä“õ—ã–ª—ã –∂–∏–Ω–∞“£—ã–∑.")

    save_json(BONUS_FILE, bonus)
    save_json(USERS_FILE, users)

@dp.message_handler(lambda m: m.text == "üéÅ –ë–æ–Ω—É—Å")
async def bonus_handler(message: types.Message):
    user_id = str(message.from_user.id)
    bonus = load_json(BONUS_FILE)
    users = load_json(USERS_FILE)
    ref = f"https://t.me/YOUR_BOT_USERNAME?start={user_id}"
    await message.answer(f"üéÅ –ë–æ–Ω—É—Å: {bonus.get(user_id, 0)}\nüë• –®–∞“õ—ã—Ä“ì–∞–Ω–¥–∞—Ä —Å–∞–Ω—ã: {len(users[user_id]['invited'])}\nüîó –°—ñ–ª—Ç–µ–º–µ: {ref}")

@dp.message_handler(lambda m: m.text == "üë• “ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã")
async def user_count(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        users = load_json(USERS_FILE)
        await message.answer(f"üë• “ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã: {len(users)}")

@dp.message_handler(lambda m: m.text == "üì¢ –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É")
async def broadcast_prompt(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("‚úâÔ∏è –•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂–∞–∑—ã“£—ã–∑:")
        dp.register_message_handler(send_broadcast, content_types=types.ContentTypes.TEXT, state=None)

async def send_broadcast(message: types.Message):
    users = load_json(USERS_FILE)
    for user_id in users:
        try:
            await bot.send_message(user_id, message.text)
        except:
            continue
    await message.answer("‚úÖ –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ!")

@dp.message_handler(content_types=['photo'])
async def save_photo(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    photos = load_json(PHOTOS_FILE)
    photo_id = message.photo[-1].file_id
    photos.setdefault("all", []).append(photo_id)
    save_json(PHOTOS_FILE, photos)
    await message.answer("‚úÖ –§–æ—Ç–æ —Å–∞“õ—Ç–∞–ª–¥—ã.")

@dp.message_handler(content_types=['video'])
async def save_video(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    videos = load_json(VIDEOS_FILE)
    video_id = message.video.file_id
    videos.setdefault("all", []).append(video_id)
    save_json(VIDEOS_FILE, videos)
    await message.answer("‚úÖ –í–∏–¥–µ–æ —Å–∞“õ—Ç–∞–ª–¥—ã.")

# ---------------------- Start Bot ----------------------
if __name__ == '__main__':
    print("ü§ñ –ë–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã!")
    executor.start_polling(dp, skip_updates=True)
