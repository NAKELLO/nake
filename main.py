import os
import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram import F
from aiogram.types import Message
from aiogram.utils import executor  # executor –∏–º–ø–æ—Ä—Ç—Ç–∞—É

API_TOKEN = '7748542247:AAGVgKPaOvHH7iDL4Uei2hM_zsI_6gCowkM'  # –°—ñ–∑–¥—ñ“£ API —Ç–æ–∫–µ–Ω—ñ“£—ñ–∑
ADMIN_ID = 7702280273  # –°—ñ–∑–¥—ñ“£ ”ô–∫—ñ–º—à—ñ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã“£—ã–∑

# –õ–æ–≥ –∂–∞–∑—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Å—ã
logging.basicConfig(
    filename='bot.log',  # –õ–æ–≥ —Ñ–∞–π–ª—ã–Ω—ã“£ –∞—Ç—ã
    level=logging.INFO,  # –õ–æ–≥ –¥–µ“£–≥–µ–π—ñ
    format='%(asctime)s - %(levelname)s - %(message)s'  # –õ–æ–≥ —Ñ–æ—Ä–º–∞—Ç—ã
)

# –ë–æ—Ç—Ç—ã –∂”ô–Ω–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–¥—ñ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–ª–∞—É
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# SQLite –¥–µ—Ä–µ–∫“õ–æ—Ä—ã–Ω “õ–æ—Å—É
conn = sqlite3.connect('database.db')
cursor = conn.cursor()

# `users` –∫–µ—Å—Ç–µ—Å—ñ–Ω “õ“±—Ä—É
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    last_name TEXT
)
''')
conn.commit()

# üëë VIP –±–∞—Ç—ã—Ä–º–∞—Å—ã
@dp.message(F.text == "VIP")
async def vip(message: Message):
    logging.info(f"User {message.from_user.id} requested VIP.")
    await message.answer("üëë VIP –ë–æ–Ω—É—Å—Ç–∞—Ä —Å–∞—Ç—ã–ø –∞–ª—É:\n\n50 –±–æ–Ω—É—Å = 2000—Ç–≥\n100 –±–æ–Ω—É—Å = 4000—Ç–≥\n\n–°–∞—Ç—ã–ø –∞–ª—É “Ø—à—ñ–Ω: @KazHubALU")

# üë• “ö–æ–ª–¥–∞–Ω—É—à—ã —Å–∞–Ω—ã
@dp.message(F.text == "“ö–æ–ª–¥–∞–Ω—É—à—ã —Å–∞–Ω—ã", F.from_user.id == ADMIN_ID)
async def count_users(message: Message):
    cursor.execute("SELECT COUNT(*) FROM users")
    count = cursor.fetchone()[0]
    logging.info(f"Admin {ADMIN_ID} requested user count: {count}.")
    await message.answer(f"üë• “ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã: {count}")

# üì£ –†–∞—Å—Å—ã–ª–∫–∞
@dp.message(F.text == "–†–∞—Å—Å—ã–ª–∫–∞", F.from_user.id == ADMIN_ID)
async def start_broadcast(message: Message):
    logging.info(f"Admin {ADMIN_ID} started a broadcast.")
    await message.answer("‚úâÔ∏è –•–∞–±–∞—Ä–ª–∞–º–∞“£—ã–∑–¥—ã –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ (–±–∞—Ä–ª—ã“õ “õ–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä“ì–∞ —Ç–∞—Ä–∞—Ç—ã–ª–∞–¥—ã).")

@dp.message(F.from_user.id == ADMIN_ID, content_types=types.ContentType.TEXT)
async def broadcast_text(message: Message):
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    for user in users:
        try:
            await bot.send_message(user[0], message.text)
            logging.info(f"Message sent to user {user[0]}.")
        except Exception as e:
            logging.error(f"Error sending message to {user[0]}: {e}")
    await message.answer("‚úÖ –ë–∞—Ä–ª—ã“ì—ã–Ω–∞ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ.")

# üìÇ –ü–∞–ø–∫–∞ –∂–∞—Å–∞—É
if not os.path.exists("saved_videos"):
    os.makedirs("saved_videos")

# üîÑ –°—Ç–∞—Ä—Ç
if __name__ == '__main__':
    logging.info("Bot started.")
    executor.start_polling(dp, skip_updates=True)  # executor –∞—Ä“õ—ã–ª—ã polling –±–∞—Å—Ç–∞—É
