import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import sqlite3

# –ë–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä—ñ
API_TOKEN = '7748542247:AAFvfLMx25tohG6eOjnyEYXueC0FDFUJXxE'
ADMIN_ID = 6927494520
CHANNEL_USERNAME = "@darvinteioria"

# –õ–æ–≥
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ë–∞–∑–∞ –∂–∞—Å–∞—É
conn = sqlite3.connect("users.db")
cursor = conn.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, bonus INTEGER DEFAULT 0, referrer_id INTEGER)")
conn.commit()

# –ö–∞–Ω–∞–ª“ì–∞ –∂–∞–∑—ã–ª–¥—ã –º–∞?
async def check_subscription(user_id):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return member.status in ['member', 'creator', 'administrator']
    except:
        return False

# /start
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    args = message.get_args()
    cursor.execute("SELECT * FROM users WHERE id=?", (user_id,))
    user = cursor.fetchone()

    if not await check_subscription(user_id):
        return await message.answer("–ê–ª–¥—ã–º–µ–Ω –∞—Ä–Ω–∞“ì–∞ —Ç—ñ—Ä–∫–µ–ª—ñ“£—ñ–∑: @darvinteioria")

    if not user:
        referrer_id = int(args) if args.isdigit() else None
        cursor.execute("INSERT INTO users (id, bonus, referrer_id) VALUES (?, ?, ?)", (user_id, 2, referrer_id))
        if referrer_id:
            cursor.execute("UPDATE users SET bonus = bonus + 1 WHERE id = ?", (referrer_id,))
        conn.commit()
        await message.answer("“ö–æ—à –∫–µ–ª–¥—ñ“£! –°—ñ–∑–≥–µ 2 –±–æ–Ω—É—Å –∂–∞–∑—ã–ª–¥—ã ‚úÖ")
    else:
        await message.answer("“ö–∞–π—Ç–∞ –æ—Ä–∞–ª–¥—ã“£—ã–∑!")

    referral_link = f"https://t.me/Darvinuyatszdaribot?start={user_id}"
    cursor.execute("SELECT bonus FROM users WHERE id=?", (user_id,))
    bonus = cursor.fetchone()[0]
    await message.answer(f"–°—ñ–∑–¥–µ {bonus} –±–æ–Ω—É—Å –±–∞—Ä.\n–°—ñ–ª—Ç–µ–º–µ“£—ñ–∑: {referral_link}")

# üéÅ –ë–æ–Ω—É—Å –±–∞—Ç—ã—Ä–º–∞—Å—ã
@dp.message_handler(lambda message: message.text == 'üéÅ –ë–æ–Ω—É—Å')
async def bonus_button(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT bonus FROM users WHERE id=?", (user_id,))
    result = cursor.fetchone()
    bonus = result[0] if result else 0
    await message.answer(f"–°—ñ–∑–¥–µ {bonus} –±–æ–Ω—É—Å –±–∞—Ä.")

# /bonus
@dp.message_handler(commands=['bonus'])
async def bonus_handler(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT bonus FROM users WHERE id=?", (user_id,))
    result = cursor.fetchone()
    bonus = result[0] if result else 0
    await message.answer(f"–°—ñ–∑–¥–µ {bonus} –±–æ–Ω—É—Å –±–∞—Ä.")

# /stats ‚Äî —Ç–µ–∫ –∞–¥–º–∏–Ω–≥–µ
@dp.message_handler(commands=['stats'])
async def stats_handler(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    cursor.execute("SELECT COUNT(*) FROM users")
    total = cursor.fetchone()[0]
    await message.answer(f"–ñ“Ø–π–µ–¥–µ {total} “õ–æ–ª–¥–∞–Ω—É—à—ã –±–∞—Ä.")

if name == 'main':
    executor.start_polling(dp, skip_updates=True)
