from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import json, os, logging

API_TOKEN = '—Ç–æ–∫–µ–Ω—ñ“£–¥—ñ –º—ã–Ω–¥–∞ “õ–æ–π'
ADMIN_ID = 6927494520
BOT_USERNAME = 'Darvinuyatszdaribot'

CHANNELS = ['@Gey_Angime', '@Qazhuboyndar', '@oqigalaruyatsiz']

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

USERS_FILE = 'users.json'
BONUS_FILE = 'bonus.json'
PHOTOS_FILE = 'photos.json'
VIDEOS_FILE = 'videos.json'
KIDS_VIDEOS_FILE = 'kids_videos.json'

def load_json(file):
    if not os.path.exists(file):
        if file in [PHOTOS_FILE, VIDEOS_FILE, KIDS_VIDEOS_FILE]:
            return {"all": []}
        return {}
    with open(file, 'r') as f:
        try:
            return json.load(f)
        except:
            return {"all": []} if file in [PHOTOS_FILE, VIDEOS_FILE, KIDS_VIDEOS_FILE] else {}

def save_json(file, data):
    with open(file, 'w') as f:
        json.dump(data, f, indent=2)

async def check_subscription(user_id):
    for channel in CHANNELS:
        try:
            member = await bot.get_chat_member(channel, user_id)
            if member.status not in ["member", "administrator", "creator"]:
                return False
        except:
            return False
    return True

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if message.chat.type != 'private':
        return

    bad_keywords = ['police', 'gov', '–¥–µ–ø—É—Ç–∞—Ç', '—Å—É–¥', '–ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä–∞', 'din', 'mzrk', 'minjust']
    username = (message.from_user.username or '').lower()
    fullname = (message.from_user.full_name or '').lower()
    for word in bad_keywords:
        if word in username or word in fullname:
            return

    user_id = str(message.from_user.id)
    users = load_json(USERS_FILE)
    bonus = load_json(BONUS_FILE)

    if user_id not in users:
        if not await check_subscription(message.from_user.id):
            links = "\n".join([f"üëâ {c}" for c in CHANNELS])
            await message.answer(f"üìõ –ë–æ—Ç—Ç—ã “õ–æ–ª–¥–∞–Ω—É “Ø—à—ñ–Ω –∫–µ–ª–µ—Å—ñ –∞—Ä–Ω–∞–ª–∞—Ä“ì–∞ —Ç—ñ—Ä–∫–µ–ª—ñ“£—ñ–∑:\n\n{links}\n\n‚úÖ –¢—ñ—Ä–∫–µ–ª–≥–µ–Ω —Å–æ“£ /start –¥–µ–ø “õ–∞–π—Ç–∞ –∂–∞–∑—ã“£—ã–∑.")
            return

        users[user_id] = {"videos": 0, "photos": 0, "kids": 0, "invited": []}
        bonus[user_id] = 2

        if message.get_args():
            ref_id = message.get_args()
            if ref_id != user_id and ref_id in users and user_id not in users[ref_id]['invited']:
                users[ref_id]['invited'].append(user_id)
                bonus[ref_id] += 2
                try:
                    await bot.send_message(int(ref_id), "üéâ –°—ñ–∑–≥–µ 2 –±–æ–Ω—É—Å “õ–æ—Å—ã–ª–¥—ã!")
                except:
                    pass

        save_json(USERS_FILE, users)
        save_json(BONUS_FILE, bonus)

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üé• –í–∏–¥–µ–æ"), KeyboardButton("üñº –§–æ—Ç–æ"))
    kb.add(KeyboardButton("üë∂ –î–µ—Ç—Å–∫–∏–π"), KeyboardButton("üéÅ –ë–æ–Ω—É—Å"))
    if message.from_user.id == ADMIN_ID:
        kb.add(KeyboardButton("üì¢ –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É"), KeyboardButton("üë• “ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã"))

    await message.answer("“ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑!", reply_markup=kb)

@dp.message_handler(lambda m: m.text == "üé• –í–∏–¥–µ–æ")
async def video_handler(message: types.Message):
    user_id = str(message.from_user.id)
    users = load_json(USERS_FILE)
    bonus = load_json(BONUS_FILE)
    videos = load_json(VIDEOS_FILE).get("all", [])

    if not videos:
        await message.answer("‚ö†Ô∏è –í–∏–¥–µ–æ —Ç–∞–±—ã–ª–º–∞–¥—ã.")
        return

    if message.from_user.id != ADMIN_ID and bonus.get(user_id, 0) < 3:
        await message.answer("‚ùå –í–∏–¥–µ–æ –∫”©—Ä—É “Ø—à—ñ–Ω 3 –±–æ–Ω—É—Å “õ–∞–∂–µ—Ç.")
        return

    index = users[user_id]["videos"] % len(videos)
    await message.answer_video(videos[index])
    users[user_id]["videos"] += 1
    if message.from_user.id != ADMIN_ID:
        bonus[user_id] -= 3

    save_json(USERS_FILE, users)
    save_json(BONUS_FILE, bonus)

@dp.message_handler(lambda m: m.text == "üñº –§–æ—Ç–æ")
async def photo_handler(message: types.Message):
    user_id = str(message.from_user.id)
    users = load_json(USERS_FILE)
    bonus = load_json(BONUS_FILE)
    photos = load_json(PHOTOS_FILE).get("all", [])

    if not photos:
        await message.answer("‚ö†Ô∏è –§–æ—Ç–æ —Ç–∞–±—ã–ª–º–∞–¥—ã.")
        return

    if message.from_user.id != ADMIN_ID and bonus.get(user_id, 0) < 4:
        await message.answer("‚ùå –§–æ—Ç–æ –∫”©—Ä—É “Ø—à—ñ–Ω 4 –±–æ–Ω—É—Å “õ–∞–∂–µ—Ç.")
        return

    index = users[user_id]["photos"] % len(photos)
    await message.answer_photo(photos[index])
    users[user_id]["photos"] += 1
    if message.from_user.id != ADMIN_ID:
        bonus[user_id] -= 4

    save_json(USERS_FILE, users)
    save_json(BONUS_FILE, bonus)

@dp.message_handler(lambda m: m.text == "üë∂ –î–µ—Ç—Å–∫–∏–π")
async def kids_handler(message: types.Message):
    user_id = str(message.from_user.id)
    users = load_json(USERS_FILE)
    bonus = load_json(BONUS_FILE)
    kids = load_json(KIDS_VIDEOS_FILE).get("all", [])

    if not kids:
        await message.answer("‚ö†Ô∏è –î–µ—Ç—Å–∫–∏–π –≤–∏–¥–µ–æ–ª–∞—Ä –∂–æ“õ.")
        return

    if message.from_user.id != ADMIN_ID and bonus.get(user_id, 0) < 6:
        await message.answer("‚ùå –î–µ—Ç—Å–∫–∏–π –≤–∏–¥–µ–æ “Ø—à—ñ–Ω 6 –±–æ–Ω—É—Å “õ–∞–∂–µ—Ç.")
        return

    index = users[user_id]["kids"] % len(kids)
    await message.answer_video(kids[index])
    users[user_id]["kids"] += 1
    if message.from_user.id != ADMIN_ID:
        bonus[user_id] -= 6

    save_json(USERS_FILE, users)
    save_json(BONUS_FILE, bonus)

@dp.message_handler(lambda m: m.text == "üéÅ –ë–æ–Ω—É—Å")
async def bonus_handler(message: types.Message):
    user_id = str(message.from_user.id)
    bonus = load_json(BONUS_FILE)
    users = load_json(USERS_FILE)
    ref = f"https://t.me/{BOT_USERNAME}?start={user_id}"
    await message.answer(f"üéÅ –ë–æ–Ω—É—Å: {bonus.get(user_id, 0)}\nüë• –®–∞“õ—ã—Ä“ì–∞–Ω–¥–∞—Ä —Å–∞–Ω—ã: {len(users[user_id]['invited'])}\nüîó –°—ñ–ª—Ç–µ–º–µ: {ref}")

@dp.message_handler(content_types=['video'])
async def save_video(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    videos = load_json(VIDEOS_FILE)
    videos.setdefault("all", []).append(message.video.file_id)
    save_json(VIDEOS_FILE, videos)
    await message.answer("‚úÖ –í–∏–¥–µ–æ —Å–∞“õ—Ç–∞–ª–¥—ã.")

@dp.message_handler(content_types=['photo'])
async def save_photo(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    photos = load_json(PHOTOS_FILE)
    photos.setdefault("all", []).append(message.photo[-1].file_id)
    save_json(PHOTOS_FILE, photos)
    await message.answer("‚úÖ –§–æ—Ç–æ —Å–∞“õ—Ç–∞–ª–¥—ã.")

@dp.message_handler(lambda m: m.text == "üë• “ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã")
async def count_users(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        users = load_json(USERS_FILE)
        await message.answer(f"üë• “ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã: {len(users)}")

if __name__ == '__main__':
    print("‚úÖ –ë–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã!")
    executor.start_polling(dp, skip_updates=True)
