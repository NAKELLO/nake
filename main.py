import logging
import asyncio
import sqlite3
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, ContentType
from aiogram.utils.deep_linking import get_start_link
import os

API_TOKEN = '7748542247:AAEPCvB-3EFngPPv45SvBG_Nizh0qQmpwB4'
ADMIN_IDS = [7047272652, 6927494520]
CHANNELS = ['@Qazhuboyndar', '@oqigalaruyatsiz']

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

admin_waiting_action = {}
VIDEO_FOLDER = "saved_videos"

if not os.path.exists(VIDEO_FOLDER):
    os.makedirs(VIDEO_FOLDER)

# üì¶ –ë–∞–∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
def init_db():
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        user_id TEXT PRIMARY KEY,
        invited_by TEXT,
        bonus INTEGER DEFAULT 2
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS videos (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        file_id TEXT,
        type TEXT,
        file_path TEXT
    )''')
    conn.commit()
    conn.close()

# üë• User logics
def add_user(user_id, invited_by=None):
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id, invited_by) VALUES (?, ?)", (user_id, invited_by))
    conn.commit()
    conn.close()

def add_bonus(user_id, amount):
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("UPDATE users SET bonus = bonus + ? WHERE user_id = ?", (amount, user_id))
    conn.commit()
    conn.close()

def get_bonus(user_id):
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT bonus FROM users WHERE user_id = ?", (user_id,))
    result = c.fetchone()
    conn.close()
    return result[0] if result else 0

def decrease_bonus(user_id, amount):
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("UPDATE users SET bonus = bonus - ? WHERE user_id = ?", (amount, user_id))
    conn.commit()
    conn.close()

def add_video(file_id, video_type, file_path):
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("INSERT INTO videos (file_id, type, file_path) VALUES (?, ?, ?)", (file_id, video_type, file_path))
    conn.commit()
    conn.close()

# üì• –í–∏–¥–µ–æ–Ω—ã –∂—ñ–±–µ—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_main_keyboard(user_id):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üßí –î–µ—Ç—Å–∫–∏–π"), KeyboardButton("üîû –í–∑—Ä–æ—Å–ª—ã–π"))
    kb.row(KeyboardButton("üíé –ë–∞–ª–∞–Ω—Å"))
    if user_id in ADMIN_IDS:
        kb.row(KeyboardButton("üì• –í–∏–¥–µ–æ “õ–æ—Å—É"))
    return kb

# ‚úÖ –ñ–∞“£–∞ user “õ–æ—Å—É
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    user_id = str(message.from_user.id)
    payload = message.get_args()
    add_user(user_id, payload if payload else None)

    if payload and payload != user_id:
        add_bonus(payload, 2)

    if not await check_subscription(message.from_user.id):
        channels_list = "\n".join(CHANNELS)
        return await message.answer(f"–ë–æ—Ç—Ç—ã –ø–∞–π–¥–∞–ª–∞–Ω—É “Ø—à—ñ–Ω –∫–µ–ª–µ—Å—ñ –∫–∞–Ω–∞–ª–¥–∞—Ä“ì–∞ –∂–∞–∑—ã–ª—ã“£—ã–∑:\n{channels_list}")

    await message.answer("“ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑!", reply_markup=get_main_keyboard(message.from_user.id))

# üîí –ü–æ–¥–ø–∏—Å–∫–∞ —Ç–µ–∫—Å–µ—Ä—É
async def check_subscription(user_id):
    for channel in CHANNELS:
        try:
            member = await bot.get_chat_member(channel, user_id)
            if member.status not in ["member", "administrator", "creator"]:
                return False
        except:
            return False
    return True

# üé• –í–∏–¥–µ–æ –∂—ñ–±–µ—Ä—É (–±–∞–ª–∞–ª–∞—Ä/–µ—Ä–µ—Å–µ–∫—Ç–µ—Ä)
@dp.message_handler(lambda m: m.text in ["üßí –î–µ—Ç—Å–∫–∏–π", "üîû –í–∑—Ä–æ—Å–ª—ã–π"])
async def send_video(message: types.Message):
    user_id = str(message.from_user.id)
    video_type = "kids" if message.text == "üßí –î–µ—Ç—Å–∫–∏–π" else "adult"

    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT file_id, file_path FROM videos WHERE type = ?", (video_type,))
    results = c.fetchall()
    conn.close()

    if not results:
        return await message.answer("üì≠ –í–∏–¥–µ–æ –∂–æ“õ.")

    selected = random.choice(results)
    file_id, file_path = selected

    if message.from_user.id not in ADMIN_IDS:
        if get_bonus(user_id) < 3:
            return await message.answer("‚ùóÔ∏è 3 –±–æ–Ω—É—Å “õ–∞–∂–µ—Ç.")
        decrease_bonus(user_id, 3)

    if os.path.exists(file_path):
        with open(file_path, 'rb') as f:
            await message.answer_video(f)
    else:
        try:
            await message.answer_video(file_id)
        except:
            await message.answer("‚ö†Ô∏è –í–∏–¥–µ–æ –∂“Ø–∫—Ç–µ—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å.")

# üíé –ë–∞–ª–∞–Ω—Å
@dp.message_handler(lambda m: m.text == "üíé –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: types.Message):
    user_id = str(message.from_user.id)
    bonus = get_bonus(user_id)
    ref_link = await get_start_link(str(user_id), encode=True)
    await message.answer(f"–°—ñ–∑–¥–µ {bonus} –±–æ–Ω—É—Å –±–∞—Ä.\n–†–µ—Ñ. —Å—ñ–ª—Ç–µ–º–µ: {ref_link}")

# üì• –í–∏–¥–µ–æ “õ–æ—Å—É –±–∞—Ç—ã—Ä–º–∞—Å—ã
@dp.message_handler(lambda m: m.text == "üì• –í–∏–¥–µ–æ “õ–æ—Å—É")
async def ask_video_type(message: types.Message):
    if message.from_user.id in ADMIN_IDS:
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üßí –î–µ—Ç—Å–∫–∏–π", callback_data="upload_kids"))
        kb.add(InlineKeyboardButton("üîû –í–∑—Ä–æ—Å–ª—ã–π", callback_data="upload_adult"))
        await message.answer("“ö–∞–π –±”©–ª—ñ–º–≥–µ –≤–∏–¥–µ–æ —Å–∞–ª–∞—Å—ã–∑?", reply_markup=kb)

# üëá –ê–¥–º–∏–Ω —Ç–∏–ø —Ç–∞“£–¥–∞–¥—ã
@dp.callback_query_handler(lambda c: c.data.startswith("upload_"))
async def set_upload_type(callback_query: types.CallbackQuery):
    video_type = callback_query.data.replace("upload_", "")
    admin_waiting_action[callback_query.from_user.id] = video_type
    await callback_query.message.answer("üé¨ –í–∏–¥–µ–æ–Ω—ã –∂—ñ–±–µ—Ä—ñ“£—ñ–∑")

# üíæ –í–∏–¥–µ–æ —Å–∞“õ—Ç–∞—É ‚Äî 100% –∫–µ–ø—ñ–ª–¥—ñ–∫
@dp.message_handler(content_types=ContentType.VIDEO)
async def save_video(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    video_type = admin_waiting_action.get(message.from_user.id)
    if not video_type:
        return

    file_id = message.video.file_id
    try:
        file = await bot.get_file(file_id)
        file_path = f"{VIDEO_FOLDER}/{file_id}.mp4"
        await bot.download_file(file.file_path, file_path)
        add_video(file_id, video_type, file_path)
        await message.answer(f"‚úÖ {video_type.upper()} –≤–∏–¥–µ–æ —Å–∞“õ—Ç–∞–ª–¥—ã.")
    except Exception as e:
        await message.answer("‚ùå –í–∏–¥–µ–æ —Å–∞“õ—Ç–∞—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ —à—ã“õ—Ç—ã.")
        print(f"[ERROR] –í–∏–¥–µ–æ —Å–∞“õ—Ç–∞—É “õ–∞—Ç–µ—Å—ñ: {e}")
    admin_waiting_action.pop(message.from_user.id, None)

# üöÄ –ë–æ—Ç—Ç—ã “õ–æ—Å—É
if name == 'main':
    init_db()
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
